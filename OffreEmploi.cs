//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DAL
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Recruteur))]
    [KnownType(typeof(Condidat))]
    public partial class OffreEmploi
    {
        #region Primitive Properties
        [DataMember]
        public virtual int IdOffre
        {
            get;
            set;
        }
        [DataMember]
        public virtual int CIN
        {
            get { return _cIN; }
            set
            {
                if (_cIN != value)
                {
                    if (Recruteur != null && Recruteur.CIN != value)
                    {
                        Recruteur = null;
                    }
                    _cIN = value;
                }
            }
        }
        private int _cIN;
        [DataMember]
        public virtual string TitreOffre
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Description
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Recruteur Recruteur
        {
            get { return _recruteur; }
            set
            {
                if (!ReferenceEquals(_recruteur, value))
                {
                    var previousValue = _recruteur;
                    _recruteur = value;
                    FixupRecruteur(previousValue);
                }
            }
        }
        private Recruteur _recruteur;
        
    
        [DataMember]
        public virtual ICollection<Condidat> Condidat
        {
            get
            {
                if (_condidat == null)
                {
                    var newCollection = new FixupCollection<Condidat>();
                    newCollection.CollectionChanged += FixupCondidat;
                    _condidat = newCollection;
                }
                return _condidat;
            }
            set
            {
                if (!ReferenceEquals(_condidat, value))
                {
                    var previousValue = _condidat as FixupCollection<Condidat>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCondidat;
                    }
                    _condidat = value;
                    var newValue = value as FixupCollection<Condidat>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCondidat;
                    }
                }
            }
        }
        private ICollection<Condidat> _condidat;

        #endregion
        #region Association Fixup
    
        private void FixupRecruteur(Recruteur previousValue)
        {
            if (previousValue != null && previousValue.OffreEmploi.Contains(this))
            {
                previousValue.OffreEmploi.Remove(this);
            }
    
            if (Recruteur != null)
            {
                if (!Recruteur.OffreEmploi.Contains(this))
                {
                    Recruteur.OffreEmploi.Add(this);
                }
                if (CIN != Recruteur.CIN)
                {
                    CIN = Recruteur.CIN;
                }
            }
        }
    
        private void FixupCondidat(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Condidat item in e.NewItems)
                {
                    if (!item.OffreEmploi.Contains(this))
                    {
                        item.OffreEmploi.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Condidat item in e.OldItems)
                {
                    if (item.OffreEmploi.Contains(this))
                    {
                        item.OffreEmploi.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
