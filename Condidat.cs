//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DAL
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Utilisateur))]
    [KnownType(typeof(Entretien))]
    [KnownType(typeof(OffreEmploi))]
    public partial class Condidat
    {
        #region Primitive Properties
        [DataMember]
        public virtual int CIN
        {
            get { return _cIN; }
            set
            {
                if (_cIN != value)
                {
                    if (Utilisateur != null && Utilisateur.CIN != value)
                    {
                        Utilisateur = null;
                    }
                    _cIN = value;
                }
            }
        }
        private int _cIN;
        [DataMember]
        public virtual string CV
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Utilisateur Utilisateur
        {
            get { return _utilisateur; }
            set
            {
                if (!ReferenceEquals(_utilisateur, value))
                {
                    var previousValue = _utilisateur;
                    _utilisateur = value;
                    FixupUtilisateur(previousValue);
                }
            }
        }
        private Utilisateur _utilisateur;
        
    
        [DataMember]
        public virtual ICollection<Entretien> Entretien
        {
            get
            {
                if (_entretien == null)
                {
                    var newCollection = new FixupCollection<Entretien>();
                    newCollection.CollectionChanged += FixupEntretien;
                    _entretien = newCollection;
                }
                return _entretien;
            }
            set
            {
                if (!ReferenceEquals(_entretien, value))
                {
                    var previousValue = _entretien as FixupCollection<Entretien>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEntretien;
                    }
                    _entretien = value;
                    var newValue = value as FixupCollection<Entretien>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEntretien;
                    }
                }
            }
        }
        private ICollection<Entretien> _entretien;
        
    
        [DataMember]
        public virtual ICollection<OffreEmploi> OffreEmploi
        {
            get
            {
                if (_offreEmploi == null)
                {
                    var newCollection = new FixupCollection<OffreEmploi>();
                    newCollection.CollectionChanged += FixupOffreEmploi;
                    _offreEmploi = newCollection;
                }
                return _offreEmploi;
            }
            set
            {
                if (!ReferenceEquals(_offreEmploi, value))
                {
                    var previousValue = _offreEmploi as FixupCollection<OffreEmploi>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOffreEmploi;
                    }
                    _offreEmploi = value;
                    var newValue = value as FixupCollection<OffreEmploi>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOffreEmploi;
                    }
                }
            }
        }
        private ICollection<OffreEmploi> _offreEmploi;

        #endregion
        #region Association Fixup
    
        private void FixupUtilisateur(Utilisateur previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Condidat, this))
            {
                previousValue.Condidat = null;
            }
    
            if (Utilisateur != null)
            {
                Utilisateur.Condidat = this;
                if (CIN != Utilisateur.CIN)
                {
                    CIN = Utilisateur.CIN;
                }
            }
        }
    
        private void FixupEntretien(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Entretien item in e.NewItems)
                {
                    item.Condidat = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Entretien item in e.OldItems)
                {
                    if (ReferenceEquals(item.Condidat, this))
                    {
                        item.Condidat = null;
                    }
                }
            }
        }
    
        private void FixupOffreEmploi(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OffreEmploi item in e.NewItems)
                {
                    if (!item.Condidat.Contains(this))
                    {
                        item.Condidat.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OffreEmploi item in e.OldItems)
                {
                    if (item.Condidat.Contains(this))
                    {
                        item.Condidat.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
