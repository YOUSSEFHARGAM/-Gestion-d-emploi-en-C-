//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DAL
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Administrateur))]
    [KnownType(typeof(Condidat))]
    [KnownType(typeof(Recruteur))]
    public partial class Utilisateur
    {
        #region Primitive Properties
        [DataMember]
        public virtual int CIN
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Nom
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Prenom
        {
            get;
            set;
        }
        [DataMember]
        public virtual Nullable<System.DateTime> Date_naissance
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Adresse
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Sexe
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Num_Tel
        {
            get;
            set;
        }
        [DataMember]
        public virtual string Mail
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Administrateur Administrateur
        {
            get { return _administrateur; }
            set
            {
                if (!ReferenceEquals(_administrateur, value))
                {
                    var previousValue = _administrateur;
                    _administrateur = value;
                    FixupAdministrateur(previousValue);
                }
            }
        }
        private Administrateur _administrateur;
        
    
        [DataMember]
        public virtual Condidat Condidat
        {
            get { return _condidat; }
            set
            {
                if (!ReferenceEquals(_condidat, value))
                {
                    var previousValue = _condidat;
                    _condidat = value;
                    FixupCondidat(previousValue);
                }
            }
        }
        private Condidat _condidat;
        
    
        [DataMember]
        public virtual Recruteur Recruteur
        {
            get { return _recruteur; }
            set
            {
                if (!ReferenceEquals(_recruteur, value))
                {
                    var previousValue = _recruteur;
                    _recruteur = value;
                    FixupRecruteur(previousValue);
                }
            }
        }
        private Recruteur _recruteur;

        #endregion
        #region Association Fixup
    
        private void FixupAdministrateur(Administrateur previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Utilisateur, this))
            {
                previousValue.Utilisateur = null;
            }
    
            if (Administrateur != null)
            {
                Administrateur.Utilisateur = this;
            }
        }
    
        private void FixupCondidat(Condidat previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Utilisateur, this))
            {
                previousValue.Utilisateur = null;
            }
    
            if (Condidat != null)
            {
                Condidat.Utilisateur = this;
            }
        }
    
        private void FixupRecruteur(Recruteur previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Utilisateur, this))
            {
                previousValue.Utilisateur = null;
            }
    
            if (Recruteur != null)
            {
                Recruteur.Utilisateur = this;
            }
        }

        #endregion
    }
}
